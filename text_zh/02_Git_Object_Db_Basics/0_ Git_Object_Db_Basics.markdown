## GIT对象模型 ##

### SHA ###

所有用来表示项目历史信息的文件,是通过一个40个字符的（40-digit）"对象名"来索引的，对象名看起来像这样:

    6ff87c4664981e4397625791c8ea3bbb5f2279a3
    
你会在Git里到处看到这种"40个字符"字符串。每一个"对象名"都是对"对象"内容做SHA1哈希计算得来的，（SHA1是一种密码学的哈希算法）。这样就意味着两个不同内容的对象不可能有相同的"对象名"。
    
这样做会有几个好处：

- Git只要比较对象名，就可以很快的判断两个对象是否相同。
- 因为在每个仓库（repository）的"对象名"的计算方法都完全一样，如果同样的内容存在两个不同的仓库中，就会存在相同的"对象名"下。
- Git还可以通过检查对象内容的SHA1的哈希值和"对象名"是否相同，来判断对象内容是否正确。



### 对象 ###

每个对象(object) 包括三个部分：**类型**，**大小**和**内容**。大小就是指内容的大小，内容取决于对象的类型，有四种类型的对象："blob"、"tree"、 "commit" 和"tag"。


- **"blob"**用来存储文件数据，通常是一个文件。
- **"tree"**有点像一个目录，它管理一些**"tree"**或是 **"blob"**（就像文件和子目录）
- 一个**"commit"**只指向一个"tree"，它用来标记项目某一个特定时间点的状态。它包括一些关于时间点的元数据，如时间戳、最近一次提交的作者、指向上次提交（commits）的指针等等。
- 一个**"tag"**是来标记某一个提交(commit) 的方法。


几乎所有的Git功能都是使用这四个简单的对象类型来完成的。它就像是在你本机的文件系统之上构建一个小的文件系统。


### 与SVN的区别 ###

Git与你熟悉的大部分版本控制系统的差别是很大的。也许你熟悉Subversion、CVS、Perforce、Mercurial 等等，他们使用 _"增量文件系统"_ （Delta Storage systems）, 就是说它们存储每次提交(commit)之间的差异。Git正好与之相反，它会把你的每次提交的文件的全部内容（snapshot）都会记录下来。这会是在使用Git时的一个很重要的理念。




 
